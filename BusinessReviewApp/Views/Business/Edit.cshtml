@model BusinessReviewApp.Models.Business
@{
    List<String> postcodes = new List<String>() {"", "1", "2", "3", "4", "5", "6", "6W", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17",
    "18", "20", "22", "24", "County Dublin"};
}
@{
    List<String> yesOrNo = new List<String>() {"", "Yes", "No"};
}

<h3>Add/Edit business details</h3>

@using (Html.BeginForm("Edit", "Business", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Business</legend>
        <div class="col-md-6 text-justify">
            @Html.HiddenFor(model => model.BusinessID)
            <!--Name-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field">
                @Html.ValueFor(model => model.Name)
                @Html.HiddenFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            
            <!--Category-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Category)
            </div>
            <div class="editor-field">
                @Html.ValueFor(model => model.Category)
                @Html.HiddenFor(model => model.Category)
                @Html.ValidationMessageFor(model => model.Category)
            </div>

            <!--Number-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Number)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Number)
                @Html.ValidationMessageFor(model => model.Number)
            </div>

            <!--Street-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Street)
            </div>
            <div class="editor-field">
                @Html.ValueFor(model => model.Street)
                @Html.HiddenFor(model => model.Street)
                @Html.ValidationMessageFor(model => model.Street)
            </div>

            <!--TOWN-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Town)
            </div>
            <div class="editor-field">
                @Html.ValueFor(model => model.Town)
                @Html.HiddenFor(model => model.Town)
                @Html.ValidationMessageFor(model => model.Town)
            </div>
            
            <!--County-->
            <div class="editor-label">
                @Html.LabelFor(model => model.County)
            </div>
            <div class="editor-field">
                @Html.ValueFor(model => model.County)
                @Html.HiddenFor(model => model.County)
                @Html.ValidationMessageFor(model => model.County)
            </div>

            <!--Postcode-->
            @{
                if (Model.County.Equals("Dublin"))
                {
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Postcode)
                    </div>
                    <div class="editor-field">

                    @Html.DropDownListFor(model => model.Postcode, new SelectList(postcodes))
                    @Html.ValidationMessageFor(model => model.Postcode)
                    </div>
                }
            }

            <!--Description-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>

            <!--PhoneNumber-->
            <div class="editor-label">
                @Html.LabelFor(model => model.PhoneNumber)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PhoneNumber)
                @Html.ValidationMessageFor(model => model.PhoneNumber)
            </div>

            <!--Email-->
            <div class="editor-label">
                @Html.LabelFor(model => model.Email)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </div>

            <!--WebsiteURL-->
            <div class="editor-label">
                @Html.LabelFor(model => model.WebsiteURL)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.WebsiteURL)
                @Html.ValidationMessageFor(model => model.WebsiteURL)
            </div>

            <!--Price Rating-->
            <div class="editor-label">
                @Html.LabelFor(model => model.PriceRating)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PriceRating)
                @Html.ValidationMessageFor(model => model.PriceRating)
            </div>

             <!--Fast Food and suitable for families-->
            @{
                //Check if the category is a Food and Dining and then allow a user to enter if it is fast food and suitable for families.
                if (Model.Category.ToString().Equals("Food & Dining"))
                {
                    <div class="editor-label">
                        @Html.LabelFor(model => model.FastFood)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.FastFood, new SelectList(yesOrNo))
                        @Html.ValidationMessageFor(model => model.FastFood)<br />
                    </div>
                     <!--Suitable For Families-->
                    <div class="editor-label">
                        @Html.LabelFor(model => model.SuitableForFamilies)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.SuitableForFamilies, new SelectList(yesOrNo))
                        @Html.ValidationMessageFor(model => model.SuitableForFamilies)
                    </div>
                }
            }
           
            <br />
            <p>
                <input type="submit" value="Save" />
            </p>
        </div>

        <div class="col-md-6">
            <!--PHOTOS-->
            <h3>Choose photos you want to upload:</h3>
            <b>Photo 1</b>
            <input type="file" name="files" id="file1" accept="image/jpeg"/>
            @Html.HiddenFor(model => model.URLPhoto1)
            <b>Current Photo:</b><i>@Html.ValueFor(model => model.URLPhoto1)</i><br /><br />

            <b>Photo 2</b>
            <input type="file" name="files" id="file2" accept="image/jpeg"/>
            @Html.HiddenFor(model => model.URLPhoto2)
            <b>Current Photo:</b><i>@Html.ValueFor(model => model.URLPhoto2)</i><br /><br />

            <b>Photo 3</b>
            <input type="file" name="files" id="file3" accept="image/jpeg"/>
            @Html.HiddenFor(model => model.URLPhoto3)
            <b>Current Photo:</b><i>@Html.ValueFor(model => model.URLPhoto3)</i><br /><br />

            <b>Photo 4</b>
            <input type="file" name="files" id="file4" accept="image/jpeg"/>
            @Html.HiddenFor(model => model.URLPhoto4)
            <b>Current Photo:</b><i>@Html.ValueFor(model => model.URLPhoto4)</i><br /><br />

            <b>Photo 5</b>
            <input type="file" name="files" id="file5" accept="image/jpeg">
            @Html.HiddenFor(model => model.URLPhoto5)
            <b>Current Photo:</b><i>@Html.ValueFor(model => model.URLPhoto5)</i><br /><br />
        </div>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
